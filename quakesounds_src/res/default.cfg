# This is a config file for quakesounds.
# https://github.com/neogeographica/quakesounds

# The comments here in the top part of the file describe how this file is
# read and interpreted by quakesounds. If you already know what's up and just
# want to edit settings, you can search/skip down to the REQUIRED SETTINGS
# section below. You can also delete all these comments if you want! You can
# get a new copy of this file in its original form by running quakesounds in a
# directory that does not yet contain a quakesounds.cfg file (more about that
# below).


# CONFIG FORMAT AND RUNNING QUAKESOUNDS

# Every setting in this file is in the format of a setting name and a setting
# value, separated by a colon. You can put some spaces before the setting name
# and/or around the colon if you want, to make things more readable.

# When you run quakesounds, it will look for a quakesounds.cfg file in the
# current working directory. If there is one, then it will read the settings
# out of that file. You can also specify changes to settings, or add new
# settings, on the quakesounds command line like:
#
#   quakesounds.py setting1:value1 setting2:value2 setting3:value3 ...
#
# ...where for example setting1 is the name of some setting, and value1 is
# the value you want that setting to have. Stuff specified on the command line
# will take precedence over whatever is in the config file. Note that if you
# need to have spaces somewhere inside a description of a setting/value pair
# on the command line (most likely because the value needs to include spaces)
# then be sure to put quotes around it, like:
#
#   quakesounds.py "setting1:this whole thing is the value for setting1"

# If quakesounds does not find any settings in a config file or on the
# command line, it will try to create a quakesounds.cfg file in the current
# directory, with the default settings and all of these documentation comments
# included.

# Otherwise, quakesounds will start processing. If it runs into a missing
# setting, it will tell you about it and exit.


# PATH FORMAT

# Any setting value that is a path to a file or directory should be in the
# format appropriate for your platform. The examples below will be in a Linux
# format.


# SETTING VALUE SUBSTITUTION

# Every setting value can include the value of some other setting(s), as well
# as some special automatically generated values. For some settings this can
# be very useful, for others not so much, but just to keep things clear the
# same rules are applied to EVERY setting value.

# To include the value of setting A in the value of setting B, you would refer
# to the value of setting A by using the token %A% somewhere in the value of
# setting B. So for example if you defined these three settings:
#
#   pak_paths : %my_home_dir%pak0.pak
#   out_working_dir : %my_home_dir%quakesounds_output
#   my_home_dir : /home/bob/
#
# ... then the value of pak_paths will be /home/bob/pak0.pak and the value of
# out_working_dir will be /home/bob/quakesounds_output. It doesn't matter in
# what order the settings are defined. It doesn't matter if some are defined
# on the command line and some in the config file.
#
# If you need to get fancy, the result of a substitution can itself contain
# more settings tokens, etc. and so forth, but creating a super-deep (or
# infinite) stack of substitutions is not allowed & will cause quakesounds to
# shut down.

# Once the settings substitutions have been processed, a few more special
# tokens will be taken care of if they are present:
#
#   %qs_home% is the complete path to the directory containing the quakesounds
#   application, including any trailing path separator.
#
#   %qs_working_dir% is the complete path to the current working directory at
#   the time that quakesounds is invoked, including any trailing path separator.
#
#   %qs_internal% is the path to a directory where any resources packaged
#   inside the quakesounds application are temporarily stored while
#   quakesounds is running. (See also the optional temp_dir setting below.) It
#   is a directory that will be deleted, along with its contents, when
#   quakesounds exits. When quakesounds starts, this directory is populated
#   with the following files:
#     - The default sox noise profile file is made available as
#       %qs_internal%noiseprofile
#     - If your version of quakesounds is bundled with a sox utility
#       included, it is made available as %qs_internal%sox
#     - If your version of quakesounds is bundled with an ffmpeg utility
#       included, it is made available as %qs_internal%ffmpeg
#
#   %sound_name% and %write_to% are special tokens that are only available for
#   use in converter commands (see below).
#
#   %percent% will resolve to the % character.
#
#   %comma% will resolve to the comma character. This might be useful in a
#   couple of the settings below whose values are comma-separated lists of
#   things, if you need to actually have a comma in one of the values.
#
# For any special token that represents a path, its value will always be in the
# correct format for the current platform.

# A technical note that probably won't matter much:
#
# Tokens in a value are discovered reading from left to right. Note that even
# though the settings substitutions are done first, they won't disturb the
# special tokens. So as a contrived example, if you have these two settings:
#
#   foo : fish
#   bar : foo%comma%foo%comma%foo
#
# ... then the final value of bar will be foo,foo,foo rather than
# foo%commafishcomma%foo.

# The default settings provide examples of substitutions. Sometimes they are
# done for clarity (to keep a particular setting value from becoming
# gigantic). Sometimes they provide a leverage point for easily changing
# something that shows up in the values of multiple settings. Remember that
# changes can be done either by editing the config file, or on the command
# line at runtime.


# REQUIRED SETTINGS

# Either this config file or the quakesounds command line MUST set values for
# files_path, pak_paths, and converter.

# files_path is the path to a file that contains mappings of sound resource
# names to new names. The specified sound name will be usable via the
# %sound_name% token in converter commands, and it's typically used as the
# basename of the sound file that the converter creates.
#
# In this file, each line should contain a sound resource name and its
# new name separated by a colon, like this:
#
#   sound/items/health1.wav : quake_health_big
#
# You can also have a line that only specifies a resource name, without the
# mapping to a new name; in this case the %sound_name% value will be the
# original basename of the sound. For example a line like this:
#
#   sound/items/health1.wav
#
# is just a shortcut for a line like this:
#
#   sound/items/health1.wav : health1
#
# If files_path is a relative path, it will be interpreted relative to the
# %qs_working_dir% directory.
#
files_path : quakesounds.files

# pak_paths is a comma-separated list of paths to pak files that should be
# looked at to find the sound resources. Any path that is a relative path
# will be interpreted relative to the %qs_working_dir% directory.
#
pak_paths : pak0.pak, pak1.pak

# converter defines a command or series of commands to take sound data from
# stdin, process it, and write it to a file.
#
# It's handy to define different commands that you might want to use as
# different settings, and just change the value of converter to refer to the
# one that you want to use. The default config provides some examples below:
# passthru, wav, ogg, and m4r. More discussion of the command format will be
# done next to the definitions of those settings.
#
converter : %m4r%


# OPTIONAL SETTINGS

# Set verbose to True for activity logging. If it is not defined (or defined
# to something other than True) then quakesounds will run fairly silently.
#
verbose : True

# Set pause_on_exit to True to wait for Enter before exiting the program. This
# is useful if you are running quakesounds in a way that launches a separate
# console window.
pause_on_exit : False

# Set out_working_dir to some value if the converter operations should be done
# somewhere other than in the %qs_working_dir% directory. If out_working_dir
# is defined and names a directory that doesn't currently exist, the directory
# will be created. If it is a relative path, it will be interpreted relative
# to the %qs_working_dir% directory.
#
out_working_dir : quakesounds_out

# Normally the qs_internal directory (described above) is created inside some
# system-standard directory for temporary files. If you want to change that
# behavior, you can set temp_dir to a path to some other directory, and
# qs_internal will be created inside that. The user running quakesounds must be
# allowed to create and execute files within that directory.
#
# (Obviously you can't use the %qs_internal% token in the value for this
# setting.)
#
# In this default config file, temp_dir is not set.
#
# temp_dir : /tmp


# ADDITIONAL SETTINGS

# The settings above are the only ones that quakesounds will initially look
# for. However, those settings values may contain references to other
# settings, which may in turn contain references to even other settings, and
# so forth.

# With the default settings, the value for converter is %m4r% which means that
# it will resolve to the value of the m4r setting. So we need to define the
# m4r setting so that its value is a converter command. We'll also define some
# other example converter commands.

# When quakesounds uses a converter command, the command is first split on
# each occurence of the pipe symbol to form multiple stages. If there is no
# pipe symbol in the command then that command has only one stage. (In these
# examples below, the m4r command is the only multiple-stage command.)

# Each stage is a comma-separated list of command-line elements. The first
# of these elements must be a program that can accept sound data on stdin.
# The remaining elements should be arguments to that program.

# If the stage is not the last stage in the command, then the program must
# write its results to stdout, in order to send them to the next stage. The
# last stage should write the results to a file.

# Two special tokens are useful in converter command definitions:
#
#   %sound_name% will resolve to the name to be used for the sound resource that
#   is currently being processed, as defined in the sound files list (see the
#   files_path setting above). Commonly you'll use this as the basename of the
#   file to create.
#
#   %write_to% represents a special command stage that takes one argument, which
#   is a file path to create and write to. It takes data on stdin and writes it
#   directly to the specified file without changing it. It can be the only or
#   last stage in a chain. Any other stages after it will be ignored.

# Below are some example converter command definitions. First we'll define
# the paths to the sound utilities, since every command will need to use at
# least one of those.

sox_path : %UTILITY_PATH%sox
ffmpeg_path : %UTILITY_PATH%ffmpeg

# The passthru command just dumps out the original wav data.
passthru : %write_to%, %sound_name%.wav

# The remaining commands all perform gain normalization and noise reduction.
# Let's define some handy settings for that here. (Note that sox noise
# reduction seems to chop off a bit of the end of the file, so we'll pad the
# end of the file to give it room.)
noise_profile : %qs_internal%noiseprofile
noise_reduction : 0.25
norm_db : -15
sox_nr   : pad, 0, 0.1, noisered, %noise_profile%, %noise_reduction%
sox_norm : gain, -n, %norm_db%

# OK let's define more converter commands.

# Note that in the uses of sox below, the "-t wav" input qualifier is necessary
# on Windows; if we let sox autodetect the input type then for some reason it
# can corrupt the end of the output sound.

# The wav command creates a WAV file. The increased output bit depth (16) is
# necessary to allow applying effects without distortion.
wav      : %sox_path%, -t, wav, -, -b, 16, %sound_name%.wav, %sox_nr%, %sox_norm%

# The ogg command creates an Ogg Vorbis file. The -C value can range from -1
# to 10, where bigger = higher quality. The -r value is the output sample
# frequency.
ogg      : %sox_path%, -t, wav, -, -C, 5, -r, 44100, %sound_name%.ogg, %sox_nr%, %sox_norm%

# The m4r command creates an M4A file with the m4r extension appropriate for
# iOS ringtone or alert sounds. The -b:a value is bitrate and the -ar value is
# sample frequency. The -b:a specification can be replaced with -q:a to try
# constant-quality encoding; -q:a takes a quality argument from 10 to 500
# where higher is better.
m4r      : %sox_pipe% | %ffmpeg_from_sox%, %ffmpeg_m4r_args%, %sound_name%.m4r
sox_pipe : %sox_path%, -t, wav, -, -t, sox, -, %sox_nr%, %sox_norm%
ffmpeg_from_sox : %ffmpeg_path%, -y, -v, quiet, -f, sox, -i, -
ffmpeg_m4r_args : -strict, experimental, -c:a, aac, -b:a, 128k, -ar, 44100, -f, ipod

