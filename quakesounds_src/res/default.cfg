# This is a config file for quakesounds.
# https://github.com/neogeographica/quakesounds

# For more details about config file format, token substitution, and special
# system-defined tokens, see the quakesounds documentation (particularly
# CONFIGURING.md).


# REQUIRED SETTINGS

# Either this config file or the quakesounds command line MUST set values for
# targets_path, pak_paths, and converter.

# targets_path is the path to a file that contains mappings of sound resource
# names to new names. The specified new sound name will be usable via the
# %sound_name% token in converter commands, and it's typically used as the
# basename of the sound file that the converter creates.
#
# If targets_path is a relative path, it will be interpreted relative to the
# %qs_working_dir% directory.
#
# In the file pointed to by targets_path, each line should contain a sound
# resource name and its new name separated by a colon, like this:
#
#   sound/items/health1.wav : quake_health_big
#
# You can also have a line that only specifies a resource name, without the
# mapping to a new name; in this case the %sound_name% value will be the
# name of the resource without the file extension. Any slashes will also be
# replaced with directory separators appropriate for the current plaform.
# For example a line like this in the file pointed to by targets_path is fine:
#
#   sound/items/health1.wav
#
# and if used on Linux (for example), it is equivalent to this line:
#
#   sound/items/health1.wav : sound/items/health1
#
# On Windows it would be equivalent to this line:
#
#   sound/items/health1.wav : sound\items\health1
#
targets_path : quakesounds.targets

# pak_paths is a comma-separated list of paths to pak files that should be
# looked at to find the sound resources. Any path that is a relative path will
# be interpreted relative to the %pak_home% directory if that is set, or
# relative to the working directory (%qs_working_dir%) if %pak_home% is not
# set.
#
pak_paths : pak0.pak, pak1.pak

# converter names another setting that defines a command (or series of
# commands) to take sound data from stdin, process it, and write it to a file.
#
# It's handy to define different commands as the values of different settings,
# and just change the value of converter to refer to the one that you want to
# use at the moment. The default config provides some examples below:
# passthru, wav, ogg, and m4r. More discussion of the command format will be
# done next to the definitions of those settings.
#
# If you would rather just directly define the entire command in the value
# of the converter setting, that's possible too, but you should read about
# the optional dumb_converter_eval setting below.
#
converter : m4r


# OPTIONAL SETTINGS

# Set verbose to True for activity logging. If it is not defined (or defined
# to something other than True) then quakesounds will be less chatty.
#
verbose : False

# Set pause_on_exit to True to wait for Enter before exiting the program. This
# is useful if you are running quakesounds in a way that prints its messages
# in a temporary window.
#
pause_on_exit : False

# Set pak_home to some path that will be the parent for any relative path in
# the pak_paths list. If it is not set, then it will default to the working
# directory (%qs_working_dir%). If it is a relative path, it will be relative
# to the working directory.
#
pak_home :

# Set out_working_dir to some value if the converter operations should be done
# somewhere other than in the %qs_working_dir% directory. If out_working_dir
# is defined and names a directory that doesn't currently exist, the directory
# will be created. If it is a relative path, it will be interpreted relative
# to the %qs_working_dir% directory.
#
out_working_dir : quakesounds_out

# Normally the entire value for the converter setting will automatically be
# interpreted as the name of some other setting to evaluate, as long as it
# doesn't contain the percent character. If the converter value does contain
# the percent character then it will be interpreted normally, like any other
# setting. Mainly this behavior is to make it easier to choose converter
# values at the command line, without having to type percent characters. If
# you want to disable this "smart" behavior and force the converter value to
# always be evaluated normally, set dumb_converter_eval to True.
#
dumb_converter_eval : False

# Normally the %qs_internal% directory for staging internally-bundled
# resources is created inside some system-standard directory for temporary
# files. If you want to change that behavior, you can set temp_dir to a path
# to some other directory, and the %qs_internal% directory will be created
# inside that. The user running quakesounds must be allowed to create and
# execute files within that directory.
#
# (Obviously you can't use the %qs_internal% token in the value for this
# setting.)
#
temp_dir :

# Normally, before sending %sound_name% to a converter command, quakesounds
# will interpret its value as a path and create any directories in that path
# that don't yet exist. If you don't want this behavior, set
# skip_preconverter_makedir to True.
#
skip_preconverter_makedir : False


# ADDITIONAL SETTINGS

# The settings above are the only ones that quakesounds will initially look
# for. However, those settings values may contain references to other
# settings, which may in turn contain references to even other settings, and
# so forth.

# NONE of the settings below are "special" as far as quakesounds is concerned.
# Their values only matter because they are referenced in the required or
# optional settings above. If you change the required/optional settings to
# reference other stuff, then some of the settings below may no longer matter,
# and you may need to define new settings.

# With the default settings, the value for converter is %m4r% which means that
# it will resolve to the value of the m4r setting. So we need to define the
# m4r setting so that its value is a converter command. We'll also define some
# other example converter commands.

# When quakesounds uses a converter command, the command is first split on
# each occurence of the pipe symbol to form multiple stages. If there is no
# pipe symbol in the command then that command has only one stage. (In these
# examples below, the m4r command is the only multiple-stage command.)

# Each stage is a comma-separated list of command-line elements. The first
# of these elements must be a program that can accept sound data on stdin.
# The remaining elements should be arguments to that program.

# The %sound_name% and %write_to% special system-defined tokens are useful in
# converter command definitions. (See CONFIGURING.md for details.)

# If a stage is not the last stage in the command, then the program for that
# stage must write its results to stdout, in order to send them to the next
# stage. The last stage should write the results to a file.

# Below are some example converter command definitions.

# First we'll define the paths to the sound utilities, since every command
# will need to use at least one of those.

sox_path : %UTILITY_PATH%sox
ffmpeg_path : %UTILITY_PATH%ffmpeg

# The passthru command just dumps out the original wav data.

passthru : %write_to%, %sound_name%.wav

# The remaining commands all perform gain normalization and noise reduction.
# Let's define some handy settings for that here. (Note that SoX noise
# reduction seems to chop off a bit of the end of the file, so we'll pad the
# end of the file to give it room.)

noise_profile : %qs_internal%noiseprofile
noise_reduction : 0.25
norm_db : -15
sox_nr : pad, 0, 0.1, noisered, %noise_profile%, %noise_reduction%
sox_norm : gain, -n, %norm_db%

# OK let's define more converter commands now.

# Note that in the uses of SoX below, the "-t wav" input qualifier is necessary
# on Windows; if we let SoX autodetect the input type then for some reason it
# can corrupt the end of the output sound.

# The wav command creates a WAV file. The increased output bit depth (16) is
# necessary to allow applying effects without distortion.

wav : %sox_path%, -t, wav, -, -b, 16, %sound_name%.wav, %sox_nr%, %sox_norm%

# The ogg command creates an Ogg Vorbis file. The -C value can range from -1
# to 10, where bigger = higher quality. The -r value is the output sample
# frequency.

ogg : %sox_path%, -t, wav, -, -C, 5, -r, 44100, %sound_name%.ogg, %sox_nr%, %sox_norm%

# The m4r command creates an M4A file with the m4r extension appropriate for
# iOS ringtone or alert sounds. The -b:a value is bitrate and the -ar value is
# sample frequency. The -b:a specification can be replaced with -q:a to try
# constant-quality encoding; -q:a takes a quality argument from 10 to 500
# where higher is better.

m4r : %sox_pipe% | %ffmpeg_from_sox%, %ffmpeg_m4r_args%, %sound_name%.m4r
sox_pipe : %sox_path%, -t, wav, -, -t, sox, -, %sox_nr%, %sox_norm%
ffmpeg_from_sox : %ffmpeg_path%, -y, -v, quiet, -f, sox, -i, -
ffmpeg_m4r_args : -strict, experimental, -c:a, aac, -b:a, 128k, -ar, 44100, -f, ipod
